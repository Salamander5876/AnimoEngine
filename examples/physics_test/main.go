package main

import (
	"fmt"
	"log"
	"math"
	"math/rand"
	"runtime"

	"github.com/Salamander5876/AnimoEngine/pkg/core"
	"github.com/Salamander5876/AnimoEngine/pkg/graphics/camera"
	"github.com/Salamander5876/AnimoEngine/pkg/graphics/shader"
	"github.com/Salamander5876/AnimoEngine/pkg/physics"
	"github.com/Salamander5876/AnimoEngine/pkg/platform/input"
	"github.com/go-gl/gl/v3.3-core/gl"
	"github.com/go-gl/glfw/v3.3/glfw"
	"github.com/go-gl/mathgl/mgl32"
)

func init() {
	runtime.LockOSThread()
}

// PhysicsTest —Ç–µ—Å—Ç —Ñ–∏–∑–∏–∫–∏
type PhysicsTest struct {
	engine *core.Engine
	camera *camera.FPSCamera
	shader *shader.Shader

	// –§–∏–∑–∏–∫–∞
	physicsWorld *physics.PhysicsWorld
	fluidSystem  *physics.FluidSystem

	// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
	cubeVAO        uint32
	cubeVBO        uint32
	sphereVAO      uint32
	sphereVBO      uint32
	sphereIndexCount int32
	capsuleVAO     uint32
	capsuleVBO     uint32
	planeVAO       uint32
	planeVBO       uint32
	liquidVAO      uint32
	liquidVBO      uint32

	// UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	selectedShape physics.CollisionShape
	spawnCooldown float32

	// –ö–∞–º–µ—Ä–∞
	firstMouse bool
	lastMouseX float64
	lastMouseY float64

	// –û—Å–≤–µ—â–µ–Ω–∏–µ
	flashlightEnabled  bool // –§–æ–Ω–∞—Ä–∏–∫ (–∫–ª–∞–≤–∏—à–∞ T)
	centerLightEnabled bool // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç (–∫–ª–∞–≤–∏—à–∞ Y)
	keyTPrevPressed    bool // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ T
	keyYPrevPressed    bool // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ Y

	// –¢–µ–Ω–∏
	shadowShader *shader.Shader // –®–µ–π–¥–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–µ–Ω–µ–π
}

func main() {
	app := &PhysicsTest{
		selectedShape:      physics.BoxShape,
		firstMouse:         true,
		flashlightEnabled:  true, // –§–æ–Ω–∞—Ä–∏–∫ –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		centerLightEnabled: true, // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	engineCfg := core.DefaultEngineConfig()
	engineCfg.WindowConfig.Title = "Physics Test - AnimoEngine"
	engineCfg.WindowConfig.Width = 1280
	engineCfg.WindowConfig.Height = 720

	engine := core.NewEngine()

	app.engine = engine

	engine.SetInitCallback(app.onInit)
	engine.SetUpdateCallback(app.onUpdate)
	engine.SetRenderCallback(app.onRender)

	if err := engine.Run(); err != nil {
		log.Fatalf("Engine error: %v", err)
	}
}

func (p *PhysicsTest) onInit(engine *core.Engine) error {
	fmt.Println("=== Physics Test ===")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenGL
	if err := gl.Init(); err != nil {
		return err
	}

	gl.Enable(gl.DEPTH_TEST)

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º—ã—à—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
	engine.GetWindow().SetCursorMode(int(glfw.CursorDisabled))

	// –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É
	p.camera = camera.NewFPSCamera(mgl32.Vec3{0, 5, 15})

	// –°–æ–∑–¥–∞–µ–º —à–µ–π–¥–µ—Ä —Å –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
	vertexShader := `
	#version 330 core
	layout (location = 0) in vec3 aPos;
	layout (location = 1) in vec3 aColor;

	out vec3 FragPos;
	out vec3 Color;

	uniform mat4 uModel;
	uniform mat4 uView;
	uniform mat4 uProjection;

	void main() {
		FragPos = vec3(uModel * vec4(aPos, 1.0));
		Color = aColor;
		gl_Position = uProjection * uView * vec4(FragPos, 1.0);
	}
	`

	fragmentShader := `
	#version 330 core
	out vec4 FragColor;

	in vec3 FragPos;
	in vec3 Color;

	uniform bool flashlightEnabled;
	uniform vec3 flashlightPos;
	uniform vec3 flashlightDir;
	uniform vec3 flashlightColor;

	uniform bool centerLightEnabled;
	uniform vec3 centerLightPos;
	uniform vec3 centerLightColor;

	uniform vec3 ambientColor;
	uniform float ambientStrength;

	void main() {
		vec3 ambient = ambientColor * ambientStrength;
		vec3 lighting = ambient;

		// –§–æ–Ω–∞—Ä–∏–∫
		if (flashlightEnabled) {
			vec3 lightDir = normalize(flashlightPos - FragPos);
			float distance = length(flashlightPos - FragPos);
			float attenuation = 1.0 / (1.0 + 0.09 * distance + 0.032 * (distance * distance));
			float theta = dot(lightDir, normalize(-flashlightDir));
			float cutOff = cos(radians(12.5));
			float outerCutOff = cos(radians(17.5));
			float epsilon = cutOff - outerCutOff;
			float intensity = clamp((theta - outerCutOff) / epsilon, 0.0, 1.0);
			float diffuse = max(1.0 - distance / 20.0, 0.0);
			vec3 flashlight = flashlightColor * diffuse * attenuation * intensity * 2.0;
			lighting += flashlight;
		}

		// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç
		if (centerLightEnabled) {
			vec3 lightDir = normalize(centerLightPos - FragPos);
			float distance = length(centerLightPos - FragPos);
			float attenuation = 1.0 / (1.0 + 0.09 * distance + 0.032 * (distance * distance));
			float diffuse = max(1.0 - distance / 25.0, 0.0);
			vec3 pointLight = centerLightColor * diffuse * attenuation * 3.0;
			lighting += pointLight;
		}

		vec3 result = Color * lighting;
		FragColor = vec4(result, 1.0);
	}
	`

	var err error
	p.shader, err = shader.NewShader(vertexShader, fragmentShader)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º —à–µ–π–¥–µ—Ä –¥–ª—è —Ç–µ–Ω–µ–π (planar shadows)
	shadowVertexShader := `
	#version 330 core
	layout (location = 0) in vec3 aPos;

	uniform mat4 uModel;
	uniform mat4 uView;
	uniform mat4 uProjection;
	uniform vec3 uLightPos; // –ü–æ–∑–∏—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–≤–µ—Ç–∞

	void main() {
		// –ü—Ä–æ–µ—Ü–∏—Ä—É–µ–º –≤–µ—Ä—à–∏–Ω—É –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å Y=0.01 (—á—É—Ç—å –≤—ã—à–µ –ø–æ–ª–∞)
		vec4 worldPos = uModel * vec4(aPos, 1.0);

		// –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–≤–µ—Ç–∞ –∫ –≤–µ—Ä—à–∏–Ω–µ
		vec3 lightDir = worldPos.xyz - uLightPos;

		// –ü—Ä–æ–µ—Ü–∏—Ä—É–µ–º –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–æ–ª–∞ (Y = 0.01)
		float t = (0.01 - uLightPos.y) / lightDir.y;
		vec3 shadowPos = uLightPos + lightDir * t;

		gl_Position = uProjection * uView * vec4(shadowPos, 1.0);
	}
	`

	shadowFragmentShader := `
	#version 330 core
	out vec4 FragColor;

	void main() {
		// –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —á—ë—Ä–Ω–∞—è —Ç–µ–Ω—å
		FragColor = vec4(0.0, 0.0, 0.0, 0.5);
	}
	`

	p.shadowShader, err = shader.NewShader(shadowVertexShader, shadowFragmentShader)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
	p.createCube()
	p.createSphere()
	p.createCapsule()
	p.createPlane()
	p.createLiquid()

	// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –º–∏—Ä
	p.physicsWorld = physics.NewPhysicsWorld()
	p.physicsWorld.GroundPlaneY = 0.0

	// –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∂–∏–¥–∫–æ—Å—Ç–∏
	p.fluidSystem = physics.NewFluidSystem()
	p.fluidSystem.Bounds = mgl32.Vec3{20, 20, 20}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å –∑–µ–º–ª–∏
	ground := physics.NewRigidBody(physics.Static, physics.PlaneShape)
	ground.Position = mgl32.Vec3{0, 0, 0}
	ground.Dimensions = mgl32.Vec3{20, 0.1, 20}
	ground.Name = "Ground"
	p.physicsWorld.AddBody(ground)

	fmt.Println("\n=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ===")
	fmt.Println("WASD - –î–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
	fmt.Println("–ú—ã—à—å - –û–±–∑–æ—Ä")
	fmt.Println("1 - –í—ã–±—Ä–∞—Ç—å –ö–£–ë (–∫—Ä–∞—Å–Ω—ã–π)")
	fmt.Println("2 - –í—ã–±—Ä–∞—Ç—å –°–§–ï–†–£ (–∑–µ–ª—ë–Ω—É—é)")
	fmt.Println("3 - –í—ã–±—Ä–∞—Ç—å –ö–ê–ü–°–£–õ–£ (—Å–∏–Ω—é—é)")
	fmt.Println("4 - –í—ã–±—Ä–∞—Ç—å –ñ–ò–î–ö–û–°–¢–¨ (–≥–æ–ª—É–±—É—é)")
	fmt.Println("–ü–†–û–ë–ï–õ - –°–æ–∑–¥–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç")
	fmt.Println("R - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã")
	fmt.Println("T - –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –§–û–ù–ê–†–ò–ö")
	fmt.Println("Y - –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –°–í–ï–¢")
	fmt.Println("ESC - –í—ã—Ö–æ–¥")
	fmt.Println("\nüí° –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç: –ö–£–ë\n")

	return nil
}

func (p *PhysicsTest) onUpdate(engine *core.Engine, dt float32) {
	inputMgr := engine.GetInputManager()

	// –í—ã—Ö–æ–¥
	if inputMgr.IsKeyPressed(input.KeyEscape) {
		engine.Stop()
		return
	}

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π
	moveSpeed := float32(5.0)
	forward := inputMgr.IsKeyPressed(input.KeyW)
	backward := inputMgr.IsKeyPressed(input.KeyS)
	left := inputMgr.IsKeyPressed(input.KeyA)
	right := inputMgr.IsKeyPressed(input.KeyD)

	p.camera.ProcessKeyboard(forward, backward, left, right, dt*moveSpeed)

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é (–æ–±–∑–æ—Ä –∫–∞–º–µ—Ä—ã)
	mouseX, mouseY := inputMgr.GetMousePosition()
	if p.firstMouse {
		p.lastMouseX = mouseX
		p.lastMouseY = mouseY
		p.firstMouse = false
		return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä—ã–≤–∫–∞
	}

	xOffset := mouseX - p.lastMouseX
	yOffset := p.lastMouseY - mouseY
	p.lastMouseX = mouseX
	p.lastMouseY = mouseY

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—ã—à–∏
	sensitivity := float32(0.3)
	p.camera.ProcessMouseMovement(float32(xOffset)*sensitivity, float32(yOffset)*sensitivity, true)

	// –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
	if inputMgr.IsKeyPressed(input.Key1) && p.selectedShape != physics.BoxShape {
		p.selectedShape = physics.BoxShape
		fmt.Println("‚úÖ –í—ã–±—Ä–∞–Ω: –ö–£–ë (–∫—Ä–∞—Å–Ω—ã–π)")
	}
	if inputMgr.IsKeyPressed(input.Key2) && p.selectedShape != physics.SphereShape {
		p.selectedShape = physics.SphereShape
		fmt.Println("‚úÖ –í—ã–±—Ä–∞–Ω–∞: –°–§–ï–†–ê (–∑–µ–ª—ë–Ω–∞—è)")
	}
	if inputMgr.IsKeyPressed(input.Key3) && p.selectedShape != physics.CapsuleShape {
		p.selectedShape = physics.CapsuleShape
		fmt.Println("‚úÖ –í—ã–±—Ä–∞–Ω–∞: –ö–ê–ü–°–£–õ–ê (—Å–∏–Ω—è—è)")
	}
	if inputMgr.IsKeyPressed(input.Key4) && p.selectedShape != physics.LiquidShape {
		p.selectedShape = physics.LiquidShape
		fmt.Println("‚úÖ –í—ã–±—Ä–∞–Ω–∞: –ñ–ò–î–ö–û–°–¢–¨ (–≥–æ–ª—É–±–∞—è, –º—è–≥–∫–∞—è)")
	}

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º - –∫–ª–∞–≤–∏—à–∞ T (—Ñ–æ–Ω–∞—Ä–∏–∫)
	keyTPressed := inputMgr.IsKeyPressed(input.KeyT)
	if keyTPressed && !p.keyTPrevPressed {
		p.flashlightEnabled = !p.flashlightEnabled
		if p.flashlightEnabled {
			fmt.Println("üí° –§–æ–Ω–∞—Ä–∏–∫ –í–ö–õ–Æ–ß–ï–ù (–∫–ª–∞–≤–∏—à–∞ T)")
		} else {
			fmt.Println("üî¶ –§–æ–Ω–∞—Ä–∏–∫ –í–´–ö–õ–Æ–ß–ï–ù (–∫–ª–∞–≤–∏—à–∞ T)")
		}
	}
	p.keyTPrevPressed = keyTPressed

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º - –∫–ª–∞–≤–∏—à–∞ Y (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç)
	keyYPressed := inputMgr.IsKeyPressed(input.KeyY)
	if keyYPressed && !p.keyYPrevPressed {
		p.centerLightEnabled = !p.centerLightEnabled
		if p.centerLightEnabled {
			fmt.Println("üí° –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç –í–ö–õ–Æ–ß–ï–ù (–∫–ª–∞–≤–∏—à–∞ Y)")
		} else {
			fmt.Println("üî¶ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç –í–´–ö–õ–Æ–ß–ï–ù (–∫–ª–∞–≤–∏—à–∞ Y)")
		}
	}
	p.keyYPrevPressed = keyYPressed

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
	p.spawnCooldown -= dt
	if inputMgr.IsKeyPressed(input.KeySpace) && p.spawnCooldown <= 0 {
		p.spawnObject()
		// –î–ª—è –∂–∏–¥–∫–æ—Å—Ç–∏ - –±—ã—Å—Ç—Ä—ã–π —Å–ø–∞–≤–Ω, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π
		if p.selectedShape == physics.LiquidShape {
			p.spawnCooldown = 0.05 // 50–º—Å –º–µ–∂–¥—É —á–∞—Å—Ç–∏—Ü–∞–º–∏
		} else {
			p.spawnCooldown = 0.3 // 300–º—Å –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
		}
	}

	// –°–±—Ä–æ—Å –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
	if inputMgr.IsKeyJustPressed(input.KeyR) {
		// –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ —É–¥–∞–ª—è–µ–º
		count := 0
		newBodies := make([]*physics.RigidBody, 0)
		for _, body := range p.physicsWorld.Bodies {
			if body.Type == physics.Static {
				newBodies = append(newBodies, body)
			} else {
				count++
			}
		}
		p.physicsWorld.Bodies = newBodies
		if count > 0 {
			fmt.Printf("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: %d\n", count)
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É
	p.physicsWorld.Step(dt)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∂–∏–¥–∫–æ—Å—Ç—å
	p.fluidSystem.Update(dt)
}

func (p *PhysicsTest) spawnObject() {
	body := physics.NewRigidBody(physics.Dynamic, p.selectedShape)
	body.Position = p.camera.Position.Add(p.camera.Front.Mul(3))
	body.Velocity = p.camera.Front.Mul(5) // –ë—Ä–æ—Å–∞–µ–º –≤–ø–µ—Ä–µ–¥
	body.Mass = 1.0
	body.Restitution = 0.4
	body.Friction = 0.6

	var nameRu string
	switch p.selectedShape {
	case physics.BoxShape:
		body.Dimensions = mgl32.Vec3{1, 1, 1}
		body.Name = "Cube"
		nameRu = "–ö–£–ë"
	case physics.SphereShape:
		body.Dimensions = mgl32.Vec3{0.5, 0, 0}
		body.Name = "Sphere"
		nameRu = "–°–§–ï–†–ê"
	case physics.CapsuleShape:
		body.Dimensions = mgl32.Vec3{0.3, 1.5, 0} // radius, height, 0
		body.Name = "Capsule"
		nameRu = "–ö–ê–ü–°–£–õ–ê"
	case physics.LiquidShape:
		// –î–ª—è –∂–∏–¥–∫–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—ë–º 100 —á–∞—Å—Ç–∏—Ü –∑–∞ —Ä–∞–∑
		nameRu = "–ñ–ò–î–ö–û–°–¢–¨"
		spawnPos := p.camera.Position.Add(p.camera.Front.Mul(2))

		// –°–æ–∑–¥–∞—ë–º 10 —á–∞—Å—Ç–∏—Ü —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ä–∞–∑–±—Ä–æ—Å–æ–º
		particleCount := 0
		for i := 0; i < 10; i++ {
			// –ù–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
			randomOffset := mgl32.Vec3{
				(rand.Float32() - 0.5) * 0.2,
				(rand.Float32() - 0.5) * 0.2,
				(rand.Float32() - 0.5) * 0.2,
			}
			particle := p.fluidSystem.AddParticle(spawnPos.Add(randomOffset))
			particle.Velocity = p.camera.Front.Mul(0.0005) // –í 100 —Ä–∞–∑ –º–µ–¥–ª–µ–Ω–Ω–µ–µ (–ø–æ—á—Ç–∏ —Å—Ç–æ–∏—Ç)
			particleCount++
		}

		fmt.Printf("üíß –°–æ–∑–¥–∞–Ω–æ —á–∞—Å—Ç–∏—Ü: %d (–≤—Å–µ–≥–æ: %d)\n", particleCount, len(p.fluidSystem.Particles))
		return // –í—ã—Ö–æ–¥–∏–º —Ä–∞–Ω—å—à–µ, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ physicsWorld
	}

	p.physicsWorld.AddBody(body)
	fmt.Printf("‚ûï –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç: %s (–≤—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: %d)\n", nameRu, len(p.physicsWorld.Bodies)-1)
}

func (p *PhysicsTest) onRender(engine *core.Engine) {
	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
	width, height := engine.GetWindow().GetSize()
	widthF, heightF := float32(width), float32(height)

	// –û–±–Ω–æ–≤–ª—è–µ–º viewport –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
	gl.Viewport(0, 0, int32(width), int32(height))

	gl.ClearColor(0.1, 0.1, 0.15, 1.0)
	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

	p.shader.Use()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é –∏ –≤–∏–¥
	projection := mgl32.Perspective(mgl32.DegToRad(45.0), widthF/heightF, 0.1, 100.0)
	view := p.camera.GetViewMatrix()

	p.shader.SetMat4("uProjection", projection)
	p.shader.SetMat4("uView", view)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–≤–µ—â–µ–Ω–∏—è
	// Ambient lighting (–±–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–∞—é—â–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ)
	p.shader.SetVec3("ambientColor", mgl32.Vec3{1.0, 1.0, 1.0}) // –ë–µ–ª—ã–π ambient
	p.shader.SetFloat("ambientStrength", 0.3) // –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏

	// –§–æ–Ω–∞—Ä–∏–∫ (SpotLight –æ—Ç –∏–≥—Ä–æ–∫–∞)
	p.shader.SetBool("flashlightEnabled", p.flashlightEnabled)
	if p.flashlightEnabled {
		p.shader.SetVec3("flashlightPos", p.camera.Position)
		p.shader.SetVec3("flashlightDir", p.camera.Front)
		p.shader.SetVec3("flashlightColor", mgl32.Vec3{2.0, 2.0, 1.8}) // –Ø—Ä–∫–∏–π —Ç—ë–ø–ª—ã–π –±–µ–ª—ã–π —Å–≤–µ—Ç
	}

	// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç (PointLight –≤ —Ü–µ–Ω—Ç—Ä–µ —Å—Ü–µ–Ω—ã)
	p.shader.SetBool("centerLightEnabled", p.centerLightEnabled)
	if p.centerLightEnabled {
		p.shader.SetVec3("centerLightPos", mgl32.Vec3{0, 5, 0}) // –í —Ü–µ–Ω—Ç—Ä–µ, –Ω–∞ –≤—ã—Å–æ—Ç–µ 5
		p.shader.SetVec3("centerLightColor", mgl32.Vec3{2.0, 1.8, 1.4}) // –Ø—Ä–∫–∏–π –∂–µ–ª—Ç–æ–≤–∞—Ç—ã–π —Å–≤–µ—Ç
	}

	// –†–∏—Å—É–µ–º –≤—Å–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç–µ–ª–∞
	for _, body := range p.physicsWorld.Bodies {
		model := body.GetModelMatrix()

		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
		var scale mgl32.Mat4
		switch body.Shape {
		case physics.SphereShape:
			// –î–ª—è —Å—Ñ–µ—Ä—ã radius —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ X, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ –∫–æ –≤—Å–µ–º –æ—Å—è–º
			radius := body.Dimensions.X() * 2 // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2 –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
			scale = mgl32.Scale3D(radius, radius, radius)
		case physics.CapsuleShape:
			// –î–ª—è –∫–∞–ø—Å—É–ª—ã: radius –≤ X, height –≤ Y
			scale = mgl32.Scale3D(body.Dimensions.X()*2, body.Dimensions.Y(), body.Dimensions.X()*2)
		case physics.LiquidShape:
			// –î–ª—è –∂–∏–¥–∫–æ—Å—Ç–∏ - –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã
			radius := body.Dimensions.X() * 0.2 // –°–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü
			scale = mgl32.Scale3D(radius, radius, radius)
		default:
			// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º dimensions –∫–∞–∫ –µ—Å—Ç—å
			scale = mgl32.Scale3D(body.Dimensions.X(), body.Dimensions.Y(), body.Dimensions.Z())
		}

		model = model.Mul4(scale)
		p.shader.SetMat4("uModel", model)

		switch body.Shape {
		case physics.BoxShape:
			gl.BindVertexArray(p.cubeVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 36)
		case physics.SphereShape:
			gl.BindVertexArray(p.sphereVAO)
			gl.DrawElements(gl.TRIANGLES, p.sphereIndexCount, gl.UNSIGNED_INT, gl.PtrOffset(0))
		case physics.CapsuleShape:
			gl.BindVertexArray(p.capsuleVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 36)
		case physics.PlaneShape:
			gl.BindVertexArray(p.planeVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 6)
		case physics.LiquidShape:
			gl.BindVertexArray(p.liquidVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 36)
		}
	}

	gl.BindVertexArray(0)

	// –†–∏—Å—É–µ–º —á–∞—Å—Ç–∏—Ü—ã –∂–∏–¥–∫–æ—Å—Ç–∏
	for _, particle := range p.fluidSystem.Particles {
		model := mgl32.Translate3D(particle.Position.X(), particle.Position.Y(), particle.Position.Z())

		// –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü—ã
		particleSize := float32(0.1) // –£–º–µ–Ω—å—à–∏–ª –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –≤–∏–¥–∞
		scale := mgl32.Scale3D(particleSize, particleSize, particleSize)
		model = model.Mul4(scale)

		p.shader.SetMat4("uModel", model)

		// –†–∏—Å—É–µ–º –∫–∞–∫ –≥–æ–ª—É–±—É—é —Å—Ñ–µ—Ä—É
		gl.BindVertexArray(p.liquidVAO)
		gl.DrawArrays(gl.TRIANGLES, 0, 36)
	}

	gl.BindVertexArray(0)

	// ===== –†–ï–ù–î–ï–†–ò–ú –¢–ï–ù–ò =====
	// –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–Ω–µ–π
	var lightSources []mgl32.Vec3

	if p.centerLightEnabled {
		lightSources = append(lightSources, mgl32.Vec3{0, 5, 0}) // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç
	}
	if p.flashlightEnabled {
		lightSources = append(lightSources, p.camera.Position) // –§–æ–Ω–∞—Ä–∏–∫ –æ—Ç –∫–∞–º–µ—Ä—ã
	}

	// –†–∏—Å—É–µ–º —Ç–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–≤–µ—Ç–∞
	if len(lightSources) > 0 {
		// –í–∫–ª—é—á–∞–µ–º blending –¥–ª—è –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —Ç–µ–Ω–µ–π
		gl.Enable(gl.BLEND)
		gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
		// –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å –≤ depth buffer –¥–ª—è —Ç–µ–Ω–µ–π
		gl.DepthMask(false)

		p.shadowShader.Use()
		p.shadowShader.SetMat4("uProjection", projection)
		p.shadowShader.SetMat4("uView", view)

		// –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–Ω–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–≤–µ—Ç–∞
		for _, lightPos := range lightSources {
			p.shadowShader.SetVec3("uLightPos", lightPos)

			// –†–∏—Å—É–µ–º —Ç–µ–Ω–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–∫—Ä–æ–º–µ –ø–æ–ª–∞)
			for _, body := range p.physicsWorld.Bodies {
		if body.Type == physics.Static {
			continue // –ù–µ —Ä–∏—Å—É–µ–º —Ç–µ–Ω–∏ –¥–ª—è –ø–æ–ª–∞
		}

		model := body.GetModelMatrix()

		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
		var scale mgl32.Mat4
		switch body.Shape {
		case physics.SphereShape:
			radius := body.Dimensions.X() * 2
			scale = mgl32.Scale3D(radius, radius, radius)
		case physics.CapsuleShape:
			scale = mgl32.Scale3D(body.Dimensions.X()*2, body.Dimensions.Y(), body.Dimensions.X()*2)
		case physics.LiquidShape:
			radius := body.Dimensions.X() * 0.2
			scale = mgl32.Scale3D(radius, radius, radius)
		default:
			scale = mgl32.Scale3D(body.Dimensions.X(), body.Dimensions.Y(), body.Dimensions.Z())
		}

		model = model.Mul4(scale)
		p.shadowShader.SetMat4("uModel", model)

		// –†–∏—Å—É–µ–º —Ç–µ–Ω—å
		switch body.Shape {
		case physics.BoxShape:
			gl.BindVertexArray(p.cubeVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 36)
		case physics.SphereShape:
			gl.BindVertexArray(p.sphereVAO)
			gl.DrawElements(gl.TRIANGLES, p.sphereIndexCount, gl.UNSIGNED_INT, nil)
		case physics.CapsuleShape:
			gl.BindVertexArray(p.capsuleVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 36)
		case physics.LiquidShape:
			gl.BindVertexArray(p.liquidVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 36)
		}
			}
		}

		// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenGL
		gl.DepthMask(true)
		gl.Disable(gl.BLEND)
		gl.BindVertexArray(0)
	}
}

func (p *PhysicsTest) createCube() {
	// –ö—É–± —Å –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
	vertices := []float32{
		// –ü–æ–∑–∏—Ü–∏–∏         // –¶–≤–µ—Ç–∞
		-0.5, -0.5, -0.5, 0.8, 0.2, 0.2,
		0.5, -0.5, -0.5, 0.8, 0.2, 0.2,
		0.5, 0.5, -0.5, 0.8, 0.2, 0.2,
		0.5, 0.5, -0.5, 0.8, 0.2, 0.2,
		-0.5, 0.5, -0.5, 0.8, 0.2, 0.2,
		-0.5, -0.5, -0.5, 0.8, 0.2, 0.2,

		-0.5, -0.5, 0.5, 0.9, 0.3, 0.3,
		0.5, -0.5, 0.5, 0.9, 0.3, 0.3,
		0.5, 0.5, 0.5, 0.9, 0.3, 0.3,
		0.5, 0.5, 0.5, 0.9, 0.3, 0.3,
		-0.5, 0.5, 0.5, 0.9, 0.3, 0.3,
		-0.5, -0.5, 0.5, 0.9, 0.3, 0.3,

		-0.5, 0.5, 0.5, 0.7, 0.2, 0.2,
		-0.5, 0.5, -0.5, 0.7, 0.2, 0.2,
		-0.5, -0.5, -0.5, 0.7, 0.2, 0.2,
		-0.5, -0.5, -0.5, 0.7, 0.2, 0.2,
		-0.5, -0.5, 0.5, 0.7, 0.2, 0.2,
		-0.5, 0.5, 0.5, 0.7, 0.2, 0.2,

		0.5, 0.5, 0.5, 1.0, 0.4, 0.4,
		0.5, 0.5, -0.5, 1.0, 0.4, 0.4,
		0.5, -0.5, -0.5, 1.0, 0.4, 0.4,
		0.5, -0.5, -0.5, 1.0, 0.4, 0.4,
		0.5, -0.5, 0.5, 1.0, 0.4, 0.4,
		0.5, 0.5, 0.5, 1.0, 0.4, 0.4,

		-0.5, -0.5, -0.5, 0.6, 0.15, 0.15,
		0.5, -0.5, -0.5, 0.6, 0.15, 0.15,
		0.5, -0.5, 0.5, 0.6, 0.15, 0.15,
		0.5, -0.5, 0.5, 0.6, 0.15, 0.15,
		-0.5, -0.5, 0.5, 0.6, 0.15, 0.15,
		-0.5, -0.5, -0.5, 0.6, 0.15, 0.15,

		-0.5, 0.5, -0.5, 1.0, 0.5, 0.5,
		0.5, 0.5, -0.5, 1.0, 0.5, 0.5,
		0.5, 0.5, 0.5, 1.0, 0.5, 0.5,
		0.5, 0.5, 0.5, 1.0, 0.5, 0.5,
		-0.5, 0.5, 0.5, 1.0, 0.5, 0.5,
		-0.5, 0.5, -0.5, 1.0, 0.5, 0.5,
	}

	gl.GenVertexArrays(1, &p.cubeVAO)
	gl.GenBuffers(1, &p.cubeVBO)

	gl.BindVertexArray(p.cubeVAO)
	gl.BindBuffer(gl.ARRAY_BUFFER, p.cubeVBO)
	gl.BufferData(gl.ARRAY_BUFFER, len(vertices)*4, gl.Ptr(vertices), gl.STATIC_DRAW)

	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(0))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(3*4))
	gl.EnableVertexAttribArray(1)

	gl.BindVertexArray(0)
}

func (p *PhysicsTest) createSphere() {
	// –°–æ–∑–¥–∞—ë–º –Ω–∞—Å—Ç–æ—è—â—É—é —Å—Ñ–µ—Ä—É —Å –ø–æ–º–æ—â—å—é UV sphere
	var vertices []float32
	stacks := 10  // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ª—å—Ü–∞
	slices := 20  // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
	radius := float32(0.5)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—Ç–µ–∫—Å—ã —Å—Ñ–µ—Ä—ã
	for i := 0; i <= stacks; i++ {
		phi := float64(i) * math.Pi / float64(stacks)

		for j := 0; j <= slices; j++ {
			theta := float64(j) * 2.0 * math.Pi / float64(slices)

			x := radius * float32(math.Sin(phi)*math.Cos(theta))
			y := radius * float32(math.Cos(phi))
			z := radius * float32(math.Sin(phi)*math.Sin(theta))

			// –ü–æ–∑–∏—Ü–∏—è
			vertices = append(vertices, x, y, z)
			// –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç (–≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞)
			brightness := float32(0.7 + 0.3*math.Abs(math.Cos(phi)))
			vertices = append(vertices, 0.2*brightness, 0.8*brightness, 0.2*brightness)
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
	var indices []uint32
	for i := 0; i < stacks; i++ {
		for j := 0; j < slices; j++ {
			first := uint32(i*(slices+1) + j)
			second := first + uint32(slices+1)

			// –ü–µ—Ä–≤—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
			indices = append(indices, first, second, first+1)
			// –í—Ç–æ—Ä–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
			indices = append(indices, second, second+1, first+1)
		}
	}

	var ebo uint32
	gl.GenVertexArrays(1, &p.sphereVAO)
	gl.GenBuffers(1, &p.sphereVBO)
	gl.GenBuffers(1, &ebo)

	gl.BindVertexArray(p.sphereVAO)

	gl.BindBuffer(gl.ARRAY_BUFFER, p.sphereVBO)
	gl.BufferData(gl.ARRAY_BUFFER, len(vertices)*4, gl.Ptr(vertices), gl.STATIC_DRAW)

	gl.BindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebo)
	gl.BufferData(gl.ELEMENT_ARRAY_BUFFER, len(indices)*4, gl.Ptr(indices), gl.STATIC_DRAW)

	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(0))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(3*4))
	gl.EnableVertexAttribArray(1)

	gl.BindVertexArray(0)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
	p.sphereIndexCount = int32(len(indices))
}

func (p *PhysicsTest) createCapsule() {
	// –ö–∞–ø—Å—É–ª–∞ (–∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –∫—É–±–æ–º) —Å —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º
	vertices := []float32{
		-0.5, -0.5, -0.5, 0.2, 0.2, 0.8,
		0.5, -0.5, -0.5, 0.2, 0.2, 0.8,
		0.5, 0.5, -0.5, 0.2, 0.2, 0.8,
		0.5, 0.5, -0.5, 0.2, 0.2, 0.8,
		-0.5, 0.5, -0.5, 0.2, 0.2, 0.8,
		-0.5, -0.5, -0.5, 0.2, 0.2, 0.8,

		-0.5, -0.5, 0.5, 0.3, 0.3, 0.9,
		0.5, -0.5, 0.5, 0.3, 0.3, 0.9,
		0.5, 0.5, 0.5, 0.3, 0.3, 0.9,
		0.5, 0.5, 0.5, 0.3, 0.3, 0.9,
		-0.5, 0.5, 0.5, 0.3, 0.3, 0.9,
		-0.5, -0.5, 0.5, 0.3, 0.3, 0.9,

		-0.5, 0.5, 0.5, 0.2, 0.2, 0.7,
		-0.5, 0.5, -0.5, 0.2, 0.2, 0.7,
		-0.5, -0.5, -0.5, 0.2, 0.2, 0.7,
		-0.5, -0.5, -0.5, 0.2, 0.2, 0.7,
		-0.5, -0.5, 0.5, 0.2, 0.2, 0.7,
		-0.5, 0.5, 0.5, 0.2, 0.2, 0.7,

		0.5, 0.5, 0.5, 0.4, 0.4, 1.0,
		0.5, 0.5, -0.5, 0.4, 0.4, 1.0,
		0.5, -0.5, -0.5, 0.4, 0.4, 1.0,
		0.5, -0.5, -0.5, 0.4, 0.4, 1.0,
		0.5, -0.5, 0.5, 0.4, 0.4, 1.0,
		0.5, 0.5, 0.5, 0.4, 0.4, 1.0,

		-0.5, -0.5, -0.5, 0.15, 0.15, 0.6,
		0.5, -0.5, -0.5, 0.15, 0.15, 0.6,
		0.5, -0.5, 0.5, 0.15, 0.15, 0.6,
		0.5, -0.5, 0.5, 0.15, 0.15, 0.6,
		-0.5, -0.5, 0.5, 0.15, 0.15, 0.6,
		-0.5, -0.5, -0.5, 0.15, 0.15, 0.6,

		-0.5, 0.5, -0.5, 0.5, 0.5, 1.0,
		0.5, 0.5, -0.5, 0.5, 0.5, 1.0,
		0.5, 0.5, 0.5, 0.5, 0.5, 1.0,
		0.5, 0.5, 0.5, 0.5, 0.5, 1.0,
		-0.5, 0.5, 0.5, 0.5, 0.5, 1.0,
		-0.5, 0.5, -0.5, 0.5, 0.5, 1.0,
	}

	gl.GenVertexArrays(1, &p.capsuleVAO)
	gl.GenBuffers(1, &p.capsuleVBO)

	gl.BindVertexArray(p.capsuleVAO)
	gl.BindBuffer(gl.ARRAY_BUFFER, p.capsuleVBO)
	gl.BufferData(gl.ARRAY_BUFFER, len(vertices)*4, gl.Ptr(vertices), gl.STATIC_DRAW)

	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(0))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(3*4))
	gl.EnableVertexAttribArray(1)

	gl.BindVertexArray(0)
}

func (p *PhysicsTest) createPlane() {
	// –ü–ª–æ—Å–∫–æ—Å—Ç—å —Å —Å–µ—Ä—ã–º —Ü–≤–µ—Ç–æ–º
	vertices := []float32{
		// –ü–æ–∑–∏—Ü–∏–∏         // –¶–≤–µ—Ç–∞
		-0.5, 0, -0.5, 0.3, 0.3, 0.3,
		0.5, 0, -0.5, 0.3, 0.3, 0.3,
		0.5, 0, 0.5, 0.3, 0.3, 0.3,

		-0.5, 0, -0.5, 0.3, 0.3, 0.3,
		0.5, 0, 0.5, 0.3, 0.3, 0.3,
		-0.5, 0, 0.5, 0.3, 0.3, 0.3,
	}

	gl.GenVertexArrays(1, &p.planeVAO)
	gl.GenBuffers(1, &p.planeVBO)

	gl.BindVertexArray(p.planeVAO)
	gl.BindBuffer(gl.ARRAY_BUFFER, p.planeVBO)
	gl.BufferData(gl.ARRAY_BUFFER, len(vertices)*4, gl.Ptr(vertices), gl.STATIC_DRAW)

	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(0))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(3*4))
	gl.EnableVertexAttribArray(1)

	gl.BindVertexArray(0)
}
func (p *PhysicsTest) createLiquid() {
	// –ñ–∏–¥–∫–æ—Å—Ç—å —Å –≥–æ–ª—É–±—ã–º —Ü–≤–µ—Ç–æ–º (cyan/aqua)
	vertices := []float32{
		// –ü–æ–∑–∏—Ü–∏–∏         // –¶–≤–µ—Ç–∞ (–≥–æ–ª—É–±–æ–π)
		-0.5, -0.5, -0.5, 0.0, 0.8, 1.0,
		0.5, -0.5, -0.5, 0.0, 0.8, 1.0,
		0.5, 0.5, -0.5, 0.0, 0.8, 1.0,
		0.5, 0.5, -0.5, 0.0, 0.8, 1.0,
		-0.5, 0.5, -0.5, 0.0, 0.8, 1.0,
		-0.5, -0.5, -0.5, 0.0, 0.8, 1.0,

		-0.5, -0.5, 0.5, 0.1, 0.9, 1.0,
		0.5, -0.5, 0.5, 0.1, 0.9, 1.0,
		0.5, 0.5, 0.5, 0.1, 0.9, 1.0,
		0.5, 0.5, 0.5, 0.1, 0.9, 1.0,
		-0.5, 0.5, 0.5, 0.1, 0.9, 1.0,
		-0.5, -0.5, 0.5, 0.1, 0.9, 1.0,

		-0.5, 0.5, 0.5, 0.0, 0.7, 0.9,
		-0.5, 0.5, -0.5, 0.0, 0.7, 0.9,
		-0.5, -0.5, -0.5, 0.0, 0.7, 0.9,
		-0.5, -0.5, -0.5, 0.0, 0.7, 0.9,
		-0.5, -0.5, 0.5, 0.0, 0.7, 0.9,
		-0.5, 0.5, 0.5, 0.0, 0.7, 0.9,

		0.5, 0.5, 0.5, 0.2, 1.0, 1.0,
		0.5, 0.5, -0.5, 0.2, 1.0, 1.0,
		0.5, -0.5, -0.5, 0.2, 1.0, 1.0,
		0.5, -0.5, -0.5, 0.2, 1.0, 1.0,
		0.5, -0.5, 0.5, 0.2, 1.0, 1.0,
		0.5, 0.5, 0.5, 0.2, 1.0, 1.0,

		-0.5, -0.5, -0.5, 0.0, 0.6, 0.8,
		0.5, -0.5, -0.5, 0.0, 0.6, 0.8,
		0.5, -0.5, 0.5, 0.0, 0.6, 0.8,
		0.5, -0.5, 0.5, 0.0, 0.6, 0.8,
		-0.5, -0.5, 0.5, 0.0, 0.6, 0.8,
		-0.5, -0.5, -0.5, 0.0, 0.6, 0.8,

		-0.5, 0.5, -0.5, 0.3, 1.0, 1.0,
		0.5, 0.5, -0.5, 0.3, 1.0, 1.0,
		0.5, 0.5, 0.5, 0.3, 1.0, 1.0,
		0.5, 0.5, 0.5, 0.3, 1.0, 1.0,
		-0.5, 0.5, 0.5, 0.3, 1.0, 1.0,
		-0.5, 0.5, -0.5, 0.3, 1.0, 1.0,
	}

	gl.GenVertexArrays(1, &p.liquidVAO)
	gl.GenBuffers(1, &p.liquidVBO)

	gl.BindVertexArray(p.liquidVAO)
	gl.BindBuffer(gl.ARRAY_BUFFER, p.liquidVBO)
	gl.BufferData(gl.ARRAY_BUFFER, len(vertices)*4, gl.Ptr(vertices), gl.STATIC_DRAW)

	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(0))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(3*4))
	gl.EnableVertexAttribArray(1)

	gl.BindVertexArray(0)
}
