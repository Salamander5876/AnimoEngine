package main

import (
	"fmt"
	"log"
	"runtime"

	"github.com/Salamander5876/AnimoEngine/pkg/core"
	"github.com/Salamander5876/AnimoEngine/pkg/graphics/camera"
	"github.com/Salamander5876/AnimoEngine/pkg/graphics/shader"
	"github.com/Salamander5876/AnimoEngine/pkg/physics"
	"github.com/Salamander5876/AnimoEngine/pkg/platform/input"
	"github.com/go-gl/gl/v3.3-core/gl"
	"github.com/go-gl/mathgl/mgl32"
)

func init() {
	runtime.LockOSThread()
}

// PhysicsTest —Ç–µ—Å—Ç —Ñ–∏–∑–∏–∫–∏
type PhysicsTest struct {
	engine *core.Engine
	camera *camera.FPSCamera
	shader *shader.Shader

	// –§–∏–∑–∏–∫–∞
	physicsWorld *physics.PhysicsWorld

	// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
	cubeVAO    uint32
	cubeVBO    uint32
	sphereVAO  uint32
	sphereVBO  uint32
	capsuleVAO uint32
	capsuleVBO uint32
	planeVAO   uint32
	planeVBO   uint32

	// UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	selectedShape physics.CollisionShape
	spawnCooldown float32

	// –ö–∞–º–µ—Ä–∞
	firstMouse bool
	lastMouseX float64
	lastMouseY float64
}

func main() {
	app := &PhysicsTest{
		selectedShape: physics.BoxShape,
		firstMouse:    true,
	}

	engineCfg := core.DefaultEngineConfig()
	engineCfg.WindowConfig.Title = "Physics Test - AnimoEngine"
	engineCfg.WindowConfig.Width = 1280
	engineCfg.WindowConfig.Height = 720

	engine := core.NewEngine()

	app.engine = engine

	engine.SetInitCallback(app.onInit)
	engine.SetUpdateCallback(app.onUpdate)
	engine.SetRenderCallback(app.onRender)

	if err := engine.Run(); err != nil {
		log.Fatalf("Engine error: %v", err)
	}
}

func (p *PhysicsTest) onInit(engine *core.Engine) error {
	fmt.Println("=== Physics Test ===")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenGL
	if err := gl.Init(); err != nil {
		return err
	}

	gl.Enable(gl.DEPTH_TEST)

	// –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É
	p.camera = camera.NewFPSCamera(mgl32.Vec3{0, 5, 15})

	// –°–æ–∑–¥–∞–µ–º —à–µ–π–¥–µ—Ä
	vertexShader := `
	#version 330 core
	layout (location = 0) in vec3 aPos;
	layout (location = 1) in vec3 aColor;

	uniform mat4 uModel;
	uniform mat4 uView;
	uniform mat4 uProjection;

	out vec3 FragColor;

	void main() {
		gl_Position = uProjection * uView * uModel * vec4(aPos, 1.0);
		FragColor = aColor;
	}
	`

	fragmentShader := `
	#version 330 core
	in vec3 FragColor;
	out vec4 color;

	void main() {
		color = vec4(FragColor, 1.0);
	}
	`

	var err error
	p.shader, err = shader.NewShader(vertexShader, fragmentShader)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
	p.createCube()
	p.createSphere()
	p.createCapsule()
	p.createPlane()

	// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –º–∏—Ä
	p.physicsWorld = physics.NewPhysicsWorld()
	p.physicsWorld.GroundPlaneY = 0.0

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å –∑–µ–º–ª–∏
	ground := physics.NewRigidBody(physics.Static, physics.PlaneShape)
	ground.Position = mgl32.Vec3{0, 0, 0}
	ground.Dimensions = mgl32.Vec3{20, 0.1, 20}
	ground.Name = "Ground"
	p.physicsWorld.AddBody(ground)

	fmt.Println("\n=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ===")
	fmt.Println("WASD - –î–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
	fmt.Println("–ú—ã—à—å - –û–±–∑–æ—Ä")
	fmt.Println("1 - –ö—É–±")
	fmt.Println("2 - –°—Ñ–µ—Ä–∞")
	fmt.Println("3 - –ö–∞–ø—Å—É–ª–∞")
	fmt.Println("SPACE - –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç")
	fmt.Println("R - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã")
	fmt.Println("ESC - –í—ã—Ö–æ–¥\n")

	return nil
}

func (p *PhysicsTest) onUpdate(engine *core.Engine, dt float32) {
	inputMgr := engine.GetInputManager()

	// –í—ã—Ö–æ–¥
	if inputMgr.IsKeyPressed(input.KeyEscape) {
		engine.Stop()
		return
	}

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π
	moveSpeed := float32(5.0)
	forward := inputMgr.IsKeyPressed(input.KeyW)
	backward := inputMgr.IsKeyPressed(input.KeyS)
	left := inputMgr.IsKeyPressed(input.KeyA)
	right := inputMgr.IsKeyPressed(input.KeyD)

	p.camera.ProcessKeyboard(forward, backward, left, right, dt*moveSpeed)

	// –ú—ã—à—å
	mouseX, mouseY := inputMgr.GetMousePosition()
	if p.firstMouse {
		p.lastMouseX = mouseX
		p.lastMouseY = mouseY
		p.firstMouse = false
	}

	xOffset := mouseX - p.lastMouseX
	yOffset := p.lastMouseY - mouseY
	p.lastMouseX = mouseX
	p.lastMouseY = mouseY

	p.camera.ProcessMouseMovement(float32(xOffset), float32(yOffset), true)

	// –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
	if inputMgr.IsKeyPressed(input.Key1) {
		p.selectedShape = physics.BoxShape
		fmt.Println("‚úì –í—ã–±—Ä–∞–Ω: –ö—É–±")
	}
	if inputMgr.IsKeyPressed(input.Key2) {
		p.selectedShape = physics.SphereShape
		fmt.Println("‚úì –í—ã–±—Ä–∞–Ω: –°—Ñ–µ—Ä–∞")
	}
	if inputMgr.IsKeyPressed(input.Key3) {
		p.selectedShape = physics.CapsuleShape
		fmt.Println("‚úì –í—ã–±—Ä–∞–Ω: –ö–∞–ø—Å—É–ª–∞")
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
	p.spawnCooldown -= dt
	if inputMgr.IsKeyPressed(input.KeySpace) && p.spawnCooldown <= 0 {
		p.spawnObject()
		p.spawnCooldown = 0.3 // –ö—É–ª–¥–∞—É–Ω 300–º—Å
	}

	// –°–±—Ä–æ—Å –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
	if inputMgr.IsKeyPressed(input.KeyR) {
		// –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–ª–∞
		newBodies := make([]*physics.RigidBody, 0)
		for _, body := range p.physicsWorld.Bodies {
			if body.Type == physics.Static {
				newBodies = append(newBodies, body)
			}
		}
		p.physicsWorld.Bodies = newBodies
		fmt.Println("üîÑ –í—Å–µ –æ–±—ä–µ–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É
	p.physicsWorld.Step(dt)
}

func (p *PhysicsTest) spawnObject() {
	body := physics.NewRigidBody(physics.Dynamic, p.selectedShape)
	body.Position = p.camera.Position.Add(p.camera.Front.Mul(3))
	body.Velocity = p.camera.Front.Mul(5) // –ë—Ä–æ—Å–∞–µ–º –≤–ø–µ—Ä–µ–¥
	body.Mass = 1.0
	body.Restitution = 0.4
	body.Friction = 0.6

	switch p.selectedShape {
	case physics.BoxShape:
		body.Dimensions = mgl32.Vec3{1, 1, 1}
		body.Name = "Cube"
	case physics.SphereShape:
		body.Dimensions = mgl32.Vec3{0.5, 0, 0}
		body.Name = "Sphere"
	case physics.CapsuleShape:
		body.Dimensions = mgl32.Vec3{0.3, 1.5, 0} // radius, height, 0
		body.Name = "Capsule"
	}

	p.physicsWorld.AddBody(body)
	fmt.Printf("‚ûï –°–æ–∑–¥–∞–Ω: %s (ID: %d)\n", body.Name, body.ID)
}

func (p *PhysicsTest) onRender(engine *core.Engine) {
	gl.ClearColor(0.1, 0.1, 0.15, 1.0)
	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

	p.shader.Use()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é –∏ –≤–∏–¥
	width, height := engine.GetWindow().GetSize()
	widthF, heightF := float32(width), float32(height)
	projection := mgl32.Perspective(mgl32.DegToRad(45.0), widthF/heightF, 0.1, 100.0)
	view := p.camera.GetViewMatrix()

	p.shader.SetMat4("uProjection", projection)
	p.shader.SetMat4("uView", view)

	// –†–∏—Å—É–µ–º –≤—Å–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç–µ–ª–∞
	for _, body := range p.physicsWorld.Bodies {
		model := body.GetModelMatrix()

		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
		scale := mgl32.Scale3D(body.Dimensions.X(), body.Dimensions.Y(), body.Dimensions.Z())
		model = model.Mul4(scale)

		p.shader.SetMat4("uModel", model)

		switch body.Shape {
		case physics.BoxShape:
			gl.BindVertexArray(p.cubeVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 36)
		case physics.SphereShape:
			gl.BindVertexArray(p.sphereVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 36) // –ü—Ä–æ—Å—Ç–∞—è —Å—Ñ–µ—Ä–∞ –∏–∑ –∫—É–±–∞
		case physics.CapsuleShape:
			gl.BindVertexArray(p.capsuleVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 36)
		case physics.PlaneShape:
			gl.BindVertexArray(p.planeVAO)
			gl.DrawArrays(gl.TRIANGLES, 0, 6)
		}
	}

	gl.BindVertexArray(0)
}

func (p *PhysicsTest) createCube() {
	// –ö—É–± —Å –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
	vertices := []float32{
		// –ü–æ–∑–∏—Ü–∏–∏         // –¶–≤–µ—Ç–∞
		-0.5, -0.5, -0.5, 0.8, 0.2, 0.2,
		0.5, -0.5, -0.5, 0.8, 0.2, 0.2,
		0.5, 0.5, -0.5, 0.8, 0.2, 0.2,
		0.5, 0.5, -0.5, 0.8, 0.2, 0.2,
		-0.5, 0.5, -0.5, 0.8, 0.2, 0.2,
		-0.5, -0.5, -0.5, 0.8, 0.2, 0.2,

		-0.5, -0.5, 0.5, 0.9, 0.3, 0.3,
		0.5, -0.5, 0.5, 0.9, 0.3, 0.3,
		0.5, 0.5, 0.5, 0.9, 0.3, 0.3,
		0.5, 0.5, 0.5, 0.9, 0.3, 0.3,
		-0.5, 0.5, 0.5, 0.9, 0.3, 0.3,
		-0.5, -0.5, 0.5, 0.9, 0.3, 0.3,

		-0.5, 0.5, 0.5, 0.7, 0.2, 0.2,
		-0.5, 0.5, -0.5, 0.7, 0.2, 0.2,
		-0.5, -0.5, -0.5, 0.7, 0.2, 0.2,
		-0.5, -0.5, -0.5, 0.7, 0.2, 0.2,
		-0.5, -0.5, 0.5, 0.7, 0.2, 0.2,
		-0.5, 0.5, 0.5, 0.7, 0.2, 0.2,

		0.5, 0.5, 0.5, 1.0, 0.4, 0.4,
		0.5, 0.5, -0.5, 1.0, 0.4, 0.4,
		0.5, -0.5, -0.5, 1.0, 0.4, 0.4,
		0.5, -0.5, -0.5, 1.0, 0.4, 0.4,
		0.5, -0.5, 0.5, 1.0, 0.4, 0.4,
		0.5, 0.5, 0.5, 1.0, 0.4, 0.4,

		-0.5, -0.5, -0.5, 0.6, 0.15, 0.15,
		0.5, -0.5, -0.5, 0.6, 0.15, 0.15,
		0.5, -0.5, 0.5, 0.6, 0.15, 0.15,
		0.5, -0.5, 0.5, 0.6, 0.15, 0.15,
		-0.5, -0.5, 0.5, 0.6, 0.15, 0.15,
		-0.5, -0.5, -0.5, 0.6, 0.15, 0.15,

		-0.5, 0.5, -0.5, 1.0, 0.5, 0.5,
		0.5, 0.5, -0.5, 1.0, 0.5, 0.5,
		0.5, 0.5, 0.5, 1.0, 0.5, 0.5,
		0.5, 0.5, 0.5, 1.0, 0.5, 0.5,
		-0.5, 0.5, 0.5, 1.0, 0.5, 0.5,
		-0.5, 0.5, -0.5, 1.0, 0.5, 0.5,
	}

	gl.GenVertexArrays(1, &p.cubeVAO)
	gl.GenBuffers(1, &p.cubeVBO)

	gl.BindVertexArray(p.cubeVAO)
	gl.BindBuffer(gl.ARRAY_BUFFER, p.cubeVBO)
	gl.BufferData(gl.ARRAY_BUFFER, len(vertices)*4, gl.Ptr(vertices), gl.STATIC_DRAW)

	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(0))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(3*4))
	gl.EnableVertexAttribArray(1)

	gl.BindVertexArray(0)
}

func (p *PhysicsTest) createSphere() {
	// –°—Ñ–µ—Ä–∞ (–∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –∫—É–±–æ–º) —Å –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º
	vertices := []float32{
		-0.5, -0.5, -0.5, 0.2, 0.8, 0.2,
		0.5, -0.5, -0.5, 0.2, 0.8, 0.2,
		0.5, 0.5, -0.5, 0.2, 0.8, 0.2,
		0.5, 0.5, -0.5, 0.2, 0.8, 0.2,
		-0.5, 0.5, -0.5, 0.2, 0.8, 0.2,
		-0.5, -0.5, -0.5, 0.2, 0.8, 0.2,

		-0.5, -0.5, 0.5, 0.3, 0.9, 0.3,
		0.5, -0.5, 0.5, 0.3, 0.9, 0.3,
		0.5, 0.5, 0.5, 0.3, 0.9, 0.3,
		0.5, 0.5, 0.5, 0.3, 0.9, 0.3,
		-0.5, 0.5, 0.5, 0.3, 0.9, 0.3,
		-0.5, -0.5, 0.5, 0.3, 0.9, 0.3,

		-0.5, 0.5, 0.5, 0.2, 0.7, 0.2,
		-0.5, 0.5, -0.5, 0.2, 0.7, 0.2,
		-0.5, -0.5, -0.5, 0.2, 0.7, 0.2,
		-0.5, -0.5, -0.5, 0.2, 0.7, 0.2,
		-0.5, -0.5, 0.5, 0.2, 0.7, 0.2,
		-0.5, 0.5, 0.5, 0.2, 0.7, 0.2,

		0.5, 0.5, 0.5, 0.4, 1.0, 0.4,
		0.5, 0.5, -0.5, 0.4, 1.0, 0.4,
		0.5, -0.5, -0.5, 0.4, 1.0, 0.4,
		0.5, -0.5, -0.5, 0.4, 1.0, 0.4,
		0.5, -0.5, 0.5, 0.4, 1.0, 0.4,
		0.5, 0.5, 0.5, 0.4, 1.0, 0.4,

		-0.5, -0.5, -0.5, 0.15, 0.6, 0.15,
		0.5, -0.5, -0.5, 0.15, 0.6, 0.15,
		0.5, -0.5, 0.5, 0.15, 0.6, 0.15,
		0.5, -0.5, 0.5, 0.15, 0.6, 0.15,
		-0.5, -0.5, 0.5, 0.15, 0.6, 0.15,
		-0.5, -0.5, -0.5, 0.15, 0.6, 0.15,

		-0.5, 0.5, -0.5, 0.5, 1.0, 0.5,
		0.5, 0.5, -0.5, 0.5, 1.0, 0.5,
		0.5, 0.5, 0.5, 0.5, 1.0, 0.5,
		0.5, 0.5, 0.5, 0.5, 1.0, 0.5,
		-0.5, 0.5, 0.5, 0.5, 1.0, 0.5,
		-0.5, 0.5, -0.5, 0.5, 1.0, 0.5,
	}

	gl.GenVertexArrays(1, &p.sphereVAO)
	gl.GenBuffers(1, &p.sphereVBO)

	gl.BindVertexArray(p.sphereVAO)
	gl.BindBuffer(gl.ARRAY_BUFFER, p.sphereVBO)
	gl.BufferData(gl.ARRAY_BUFFER, len(vertices)*4, gl.Ptr(vertices), gl.STATIC_DRAW)

	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(0))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(3*4))
	gl.EnableVertexAttribArray(1)

	gl.BindVertexArray(0)
}

func (p *PhysicsTest) createCapsule() {
	// –ö–∞–ø—Å—É–ª–∞ (–∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –∫—É–±–æ–º) —Å —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º
	vertices := []float32{
		-0.5, -0.5, -0.5, 0.2, 0.2, 0.8,
		0.5, -0.5, -0.5, 0.2, 0.2, 0.8,
		0.5, 0.5, -0.5, 0.2, 0.2, 0.8,
		0.5, 0.5, -0.5, 0.2, 0.2, 0.8,
		-0.5, 0.5, -0.5, 0.2, 0.2, 0.8,
		-0.5, -0.5, -0.5, 0.2, 0.2, 0.8,

		-0.5, -0.5, 0.5, 0.3, 0.3, 0.9,
		0.5, -0.5, 0.5, 0.3, 0.3, 0.9,
		0.5, 0.5, 0.5, 0.3, 0.3, 0.9,
		0.5, 0.5, 0.5, 0.3, 0.3, 0.9,
		-0.5, 0.5, 0.5, 0.3, 0.3, 0.9,
		-0.5, -0.5, 0.5, 0.3, 0.3, 0.9,

		-0.5, 0.5, 0.5, 0.2, 0.2, 0.7,
		-0.5, 0.5, -0.5, 0.2, 0.2, 0.7,
		-0.5, -0.5, -0.5, 0.2, 0.2, 0.7,
		-0.5, -0.5, -0.5, 0.2, 0.2, 0.7,
		-0.5, -0.5, 0.5, 0.2, 0.2, 0.7,
		-0.5, 0.5, 0.5, 0.2, 0.2, 0.7,

		0.5, 0.5, 0.5, 0.4, 0.4, 1.0,
		0.5, 0.5, -0.5, 0.4, 0.4, 1.0,
		0.5, -0.5, -0.5, 0.4, 0.4, 1.0,
		0.5, -0.5, -0.5, 0.4, 0.4, 1.0,
		0.5, -0.5, 0.5, 0.4, 0.4, 1.0,
		0.5, 0.5, 0.5, 0.4, 0.4, 1.0,

		-0.5, -0.5, -0.5, 0.15, 0.15, 0.6,
		0.5, -0.5, -0.5, 0.15, 0.15, 0.6,
		0.5, -0.5, 0.5, 0.15, 0.15, 0.6,
		0.5, -0.5, 0.5, 0.15, 0.15, 0.6,
		-0.5, -0.5, 0.5, 0.15, 0.15, 0.6,
		-0.5, -0.5, -0.5, 0.15, 0.15, 0.6,

		-0.5, 0.5, -0.5, 0.5, 0.5, 1.0,
		0.5, 0.5, -0.5, 0.5, 0.5, 1.0,
		0.5, 0.5, 0.5, 0.5, 0.5, 1.0,
		0.5, 0.5, 0.5, 0.5, 0.5, 1.0,
		-0.5, 0.5, 0.5, 0.5, 0.5, 1.0,
		-0.5, 0.5, -0.5, 0.5, 0.5, 1.0,
	}

	gl.GenVertexArrays(1, &p.capsuleVAO)
	gl.GenBuffers(1, &p.capsuleVBO)

	gl.BindVertexArray(p.capsuleVAO)
	gl.BindBuffer(gl.ARRAY_BUFFER, p.capsuleVBO)
	gl.BufferData(gl.ARRAY_BUFFER, len(vertices)*4, gl.Ptr(vertices), gl.STATIC_DRAW)

	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(0))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(3*4))
	gl.EnableVertexAttribArray(1)

	gl.BindVertexArray(0)
}

func (p *PhysicsTest) createPlane() {
	// –ü–ª–æ—Å–∫–æ—Å—Ç—å —Å —Å–µ—Ä—ã–º —Ü–≤–µ—Ç–æ–º
	vertices := []float32{
		// –ü–æ–∑–∏—Ü–∏–∏         // –¶–≤–µ—Ç–∞
		-0.5, 0, -0.5, 0.3, 0.3, 0.3,
		0.5, 0, -0.5, 0.3, 0.3, 0.3,
		0.5, 0, 0.5, 0.3, 0.3, 0.3,

		-0.5, 0, -0.5, 0.3, 0.3, 0.3,
		0.5, 0, 0.5, 0.3, 0.3, 0.3,
		-0.5, 0, 0.5, 0.3, 0.3, 0.3,
	}

	gl.GenVertexArrays(1, &p.planeVAO)
	gl.GenBuffers(1, &p.planeVBO)

	gl.BindVertexArray(p.planeVAO)
	gl.BindBuffer(gl.ARRAY_BUFFER, p.planeVBO)
	gl.BufferData(gl.ARRAY_BUFFER, len(vertices)*4, gl.Ptr(vertices), gl.STATIC_DRAW)

	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(0))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 6*4, gl.PtrOffset(3*4))
	gl.EnableVertexAttribArray(1)

	gl.BindVertexArray(0)
}
